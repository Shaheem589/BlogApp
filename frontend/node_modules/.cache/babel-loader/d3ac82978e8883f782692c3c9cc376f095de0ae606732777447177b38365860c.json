{"ast":null,"code":"import axios from 'axios';\nimport { API_NOTIFICATION_MESSAGES, SERVICE_URLS } from '../constants/config.js';\nimport { getAccessToken, getType } from '../utils/common-utils.js';\n// ... (existing imports)\n\nconst API_URL = 'http://localhost:8000';\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  timeout: 30000,\n  headers: {\n    'Accept': 'application/json',\n    'Content-Type': 'application/json'\n  }\n});\naxiosInstance.interceptors.request.use(function (config) {\n  // Ensure that TYPE is set appropriately in your requests\n  if (config.TYPE.params) {\n    config.params = config.TYPE.params;\n  } else if (config.TYPE.query) {\n    config.url = config.url + '/' + config.TYPE.query;\n  }\n  return config;\n}, function (error) {\n  return Promise.reject(error);\n});\naxiosInstance.interceptors.response.use(function (response) {\n  return processResponse(response);\n}, function (error) {\n  return Promise.reject(processError(error));\n});\nconst processResponse = response => {\n  if ((response === null || response === void 0 ? void 0 : response.status) === 200) {\n    return {\n      isSuccess: true,\n      data: response.data\n    };\n  } else {\n    var _response$data, _response$data2;\n    return {\n      isFailure: true,\n      status: response === null || response === void 0 ? void 0 : response.status,\n      // Adjust this part based on your API's error response structure\n      msg: (response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.msg) || 'Unknown error',\n      code: (response === null || response === void 0 ? void 0 : (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.code) || ''\n    };\n  }\n};\nconst processError = error => {\n  if (error.response) {\n    console.log('ERROR IN RESPONSE:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.responseFailure,\n      code: error.response.status\n    };\n  } else if (error.request) {\n    console.log('ERROR IN REQUEST:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.requestFailure,\n      code: ''\n    };\n  } else {\n    console.log('ERROR IN NETWORK:', error.toJSON());\n    return {\n      isError: true,\n      msg: API_NOTIFICATION_MESSAGES.networkError,\n      code: ''\n    };\n  }\n};\nconst API = {};\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\n  API[key] = (body, showUploadProgress, showDownloadProgress) => axiosInstance({\n    method: value.method,\n    url: value.url,\n    data: value.method === 'DELETE' ? {} : body,\n    responseType: value.responseType,\n    headers: {\n      authorization: getAccessToken()\n    },\n    // Ensure that TYPE is set appropriately in your requests\n    TYPE: getType(value, body),\n    onUploadProgress: function (progressEvent) {\n      if (showUploadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showUploadProgress(percentageCompleted);\n      }\n    },\n    onDownloadProgress: function (progressEvent) {\n      if (showDownloadProgress) {\n        let percentageCompleted = Math.round(progressEvent.loaded * 100 / progressEvent.total);\n        showDownloadProgress(percentageCompleted);\n      }\n    }\n  });\n}\nexport { API };","map":{"version":3,"names":["axios","API_NOTIFICATION_MESSAGES","SERVICE_URLS","getAccessToken","getType","API_URL","axiosInstance","create","baseURL","timeout","headers","interceptors","request","use","config","TYPE","params","query","url","error","Promise","reject","response","processResponse","processError","status","isSuccess","data","_response$data","_response$data2","isFailure","msg","code","console","log","toJSON","isError","responseFailure","requestFailure","networkError","API","key","value","Object","entries","body","showUploadProgress","showDownloadProgress","method","responseType","authorization","onUploadProgress","progressEvent","percentageCompleted","Math","round","loaded","total","onDownloadProgress"],"sources":["E:/Final year project/WebP/Blog-Website/client/src/service/api.js"],"sourcesContent":["import axios from 'axios';\r\nimport { API_NOTIFICATION_MESSAGES ,SERVICE_URLS} from '../constants/config.js';\r\nimport { getAccessToken,getType } from '../utils/common-utils.js';\r\n// ... (existing imports)\r\n\r\nconst API_URL = 'http://localhost:8000';\r\n\r\nconst axiosInstance = axios.create({\r\n    baseURL: API_URL,\r\n    timeout: 30000,\r\n    headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\naxiosInstance.interceptors.request.use(\r\n    function (config) {\r\n        // Ensure that TYPE is set appropriately in your requests\r\n        if (config.TYPE.params) {\r\n            config.params = config.TYPE.params;\r\n        } else if (config.TYPE.query) {\r\n            config.url = config.url + '/' + config.TYPE.query;\r\n        }\r\n        return config;\r\n    },\r\n    function (error) {\r\n        return Promise.reject(error);\r\n    }\r\n);\r\n\r\naxiosInstance.interceptors.response.use(\r\n    function (response) {\r\n        return processResponse(response);\r\n    },\r\n    function (error) {\r\n        return Promise.reject(processError(error));\r\n    }\r\n);\r\n\r\nconst processResponse = (response) => {\r\n    if (response?.status === 200) {\r\n        return { isSuccess: true, data: response.data };\r\n    } else {\r\n        return {\r\n            isFailure: true,\r\n            status: response?.status,\r\n            // Adjust this part based on your API's error response structure\r\n            msg: response?.data?.msg || 'Unknown error',\r\n            code: response?.data?.code || '',\r\n        };\r\n    }\r\n};\r\n\r\nconst processError = (error) => {\r\n    if (error.response) {\r\n        console.log('ERROR IN RESPONSE:', error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.responseFailure,\r\n            code: error.response.status,\r\n        };\r\n    } else if (error.request) {\r\n        console.log('ERROR IN REQUEST:', error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.requestFailure,\r\n            code: '',\r\n        };\r\n    } else {\r\n        console.log('ERROR IN NETWORK:', error.toJSON());\r\n        return {\r\n            isError: true,\r\n            msg: API_NOTIFICATION_MESSAGES.networkError,\r\n            code: '',\r\n        };\r\n    }\r\n};\r\n\r\nconst API = {};\r\nfor (const [key, value] of Object.entries(SERVICE_URLS)) {\r\n    API[key] = (body, showUploadProgress, showDownloadProgress) =>\r\n        axiosInstance({\r\n            method: value.method,\r\n            url: value.url,\r\n            data: value.method === 'DELETE' ? {} : body,\r\n            responseType: value.responseType,\r\n            headers: {\r\n                authorization: getAccessToken(),\r\n            },\r\n            // Ensure that TYPE is set appropriately in your requests\r\n            TYPE: getType(value, body),\r\n            onUploadProgress: function (progressEvent) {\r\n                if (showUploadProgress) {\r\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showUploadProgress(percentageCompleted);\r\n                }\r\n            },\r\n            onDownloadProgress: function (progressEvent) {\r\n                if (showDownloadProgress) {\r\n                    let percentageCompleted = Math.round((progressEvent.loaded * 100) / progressEvent.total);\r\n                    showDownloadProgress(percentageCompleted);\r\n                }\r\n            },\r\n        });\r\n}\r\n\r\nexport { API };\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}